import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as l}from"./app-l65TvXU-.js";const n="/assets/classloader-DZ514z5s.png",e="/assets/doubleParent-M-X_0bMl.png",h="/assets/Java8RAMStructure-CW0E1xBC.png",t="/assets/GenerationGC-BPhx9wu3.png",p="/assets/GCStructure-BbfVmEut.png",k={},d=l('<h2 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm"><span>JVM</span></a></h2><blockquote><p>默认讨论的版本为 JDK8 之后的版本</p></blockquote><h3 id="jvm-1" tabindex="-1"><a class="header-anchor" href="#jvm-1"><span>JVM</span></a></h3><blockquote><p>Java Virtual Machine，Java虚拟机，是一个在计算机上的程序，它的职责是运行 Java 字节码文件。</p></blockquote><h3 id="jvm的三大核心功能" tabindex="-1"><a class="header-anchor" href="#jvm的三大核心功能"><span>JVM的三大核心功能</span></a></h3><ol><li><p><strong>解释运行</strong><br> 对字节码文件中的指令，实时的解释成机器码，让计算机执行。</p></li><li><p><strong>内存管理</strong></p><ul><li>自动为对象、方法等分配内存。</li><li>自动的垃圾回收机制，回收不再使用的对象。</li></ul></li><li><p><strong>即时编译</strong><br> 对热点代码进行优化，提升执行效率。</p></li></ol><h3 id="常见的-jvm-虚拟机" tabindex="-1"><a class="header-anchor" href="#常见的-jvm-虚拟机"><span>常见的 JVM 虚拟机</span></a></h3><ul><li>HotSpot（使用最广泛）</li><li>GraalVM</li><li>OpenJ9</li><li>...</li></ul><h3 id="jvm的组成" tabindex="-1"><a class="header-anchor" href="#jvm的组成"><span>JVM的组成</span></a></h3><h4 id="类加载器-classloader" tabindex="-1"><a class="header-anchor" href="#类加载器-classloader"><span>类加载器 (ClassLoader)</span></a></h4><blockquote><p>把字节码文件加载</p></blockquote><h4 id="运行时数据区" tabindex="-1"><a class="header-anchor" href="#运行时数据区"><span>运行时数据区</span></a></h4><blockquote><p>JVM 管理的内存</p></blockquote><h4 id="执行引擎" tabindex="-1"><a class="header-anchor" href="#执行引擎"><span>执行引擎</span></a></h4><blockquote><p>包含即时编译器、解释器、垃圾回收器</p></blockquote><h4 id="本地接口" tabindex="-1"><a class="header-anchor" href="#本地接口"><span>本地接口</span></a></h4><blockquote><p>存储一些由 C/C++ 编写的方法</p></blockquote><h3 id="字节码文件的组成" tabindex="-1"><a class="header-anchor" href="#字节码文件的组成"><span>字节码文件的组成</span></a></h3><blockquote><p>基本信息、静态常量池、方法、字段（当前类或者接口声明的字段信息）、属性（类的属性）</p></blockquote><h4 id="基本信息" tabindex="-1"><a class="header-anchor" href="#基本信息"><span>基本信息</span></a></h4><ul><li><p><strong>魔数</strong><br> 文件头的作用，标识文件的格式，只有前四个字节是 <code>CAFEBABE</code> 才能被当成字节码文件，被正确的加载。</p></li><li><p><strong>主版本号</strong><br> 版本号的作用主要是判断当前字节码的版本和运行时的 JDK 是否兼容。</p></li></ul><h4 id="静态常量池" tabindex="-1"><a class="header-anchor" href="#静态常量池"><span>静态常量池</span></a></h4><blockquote><p>保存了字符串常量、类或接口名、字段名。主要在字节码指令中使用（通过符号引用）</p></blockquote><h4 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h4><blockquote><p>当前类或者接口声明的方法信息、字节码指令</p></blockquote><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h3><h4 id="加载阶段" tabindex="-1"><a class="header-anchor" href="#加载阶段"><span>加载阶段</span></a></h4><ol><li>类加载器根据类的全限定名，通过不同的渠道（本地文件、动态代理生成、网络）以二进制流的方式获取字节码信息。</li><li>类加载器在加载完类之后，JVM 会将字节码中的信息保存到方法区中。生成一个 <code>InstanceKlass</code> 对象，保存类的所有信息，其中还包含实现特定功能（比如多态）的信息。</li><li>JVM 还会在堆中生成一份与方法区中数据类似的 <code>java.lang.Class</code> 对象。用于在 Java 代码中获取类的信息以及存储静态字段的数据（JDK8 及之后）。</li></ol><h4 id="连接阶段" tabindex="-1"><a class="header-anchor" href="#连接阶段"><span>连接阶段</span></a></h4><ol><li><p><strong>验证</strong>（验证是否满足Java虚拟机规范）</p><ul><li>文件格式的校验</li><li>元信息的验证（例如是否有父类）</li><li>验证程序执行指令的语义</li><li>校验符号引用</li></ul></li><li><p><strong>准备</strong>（给静态变量赋值）</p><ul><li>为静态变量分配内存并设置默认初始值（保存在堆里的 <code>Class</code> 对象中）。如果 <code>final</code> 修饰基本数据类型的静态变量，准备阶段会直接将代码中的值进行赋值。<a href="https://www.bilibili.com/video/BV1r94y1b7eS/?p=10&amp;share_source=copy_web&amp;vd_source=5903e81d41539e9b3be309b9b3bb014f&amp;t=888" target="_blank" rel="noopener noreferrer">视频</a></li></ul></li><li><p><strong>解析</strong>（将常量池中的符号引用替换成指向内存的直接引用）</p><ul><li>常量池中的符号引用（编号）替换为直接引用（内存地址）</li></ul></li></ol><h4 id="初始化阶段" tabindex="-1"><a class="header-anchor" href="#初始化阶段"><span>初始化阶段</span></a></h4><ul><li>初始化阶段会执行静态代码块中的代码，并为静态变量赋值。</li><li>初始化阶段会执行字节码文件中 <code>clinit</code> 部分的字节码指令。</li></ul><p><strong>以下几种方式会导致类的初始化：</strong></p><ol><li>访问一个类的静态变量或者静态方法（注意：<code>final</code> 修饰的并且等号右边是常量的变量不会触发初始化）。</li><li>调用 <code>Class.forName(String className)</code>。</li><li><code>new</code> 一个该类的对象。</li><li>执行 <code>main</code> 方法的当前类。</li><li><code>final</code> 修饰的变量如果赋值内容需要执行指令才能得出结果，会执行 <code>clinit</code> 方法进行初始化。</li></ol><ul><li>直接访问父类的静态变量，不会触发子类的初始化。</li><li>子类的 <code>clinit</code> 调用之前，会先调用父类的 <code>clinit</code> 初始化。</li></ul><p><strong>不会执行 <code>clinit</code> 指令的情况：</strong></p><ul><li>无静态代码块且无静态变量赋值语句。</li><li>有静态变量的声明，但是没有赋值语句。</li><li>静态变量的定义使用 <code>final</code> 关键字，这类变量会在准备阶段直接进行初始化。</li><li>数组的创建不会导致数组中元素的类进行初始化。</li></ul><h3 id="类加载器的分类" tabindex="-1"><a class="header-anchor" href="#类加载器的分类"><span>类加载器的分类</span></a></h3><h4 id="启动类加载器-bootstrap" tabindex="-1"><a class="header-anchor" href="#启动类加载器-bootstrap"><span>启动类加载器 (Bootstrap)</span></a></h4><blockquote><p>由虚拟机底层实现 C++。</p></blockquote><h4 id="扩展类加载器-ext" tabindex="-1"><a class="header-anchor" href="#扩展类加载器-ext"><span>扩展类加载器 (Ext)</span></a></h4><blockquote><p>Java 实现，允许扩展 Java 中比较通用的类。</p></blockquote><ul><li>拓展时建议使用参数进行拓展</li></ul><h4 id="应用程序加载器-app" tabindex="-1"><a class="header-anchor" href="#应用程序加载器-app"><span>应用程序加载器 (App)</span></a></h4><blockquote><p>Java 实现，加载应用使用的类，包括项目中编写的类和第三方架构中的类。</p></blockquote><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="双亲委派机制" tabindex="-1"><a class="header-anchor" href="#双亲委派机制"><span>双亲委派机制</span></a></h3><blockquote><p>当一个类加载器尝试加载类时，它会首先委托给它的父类加载器。只有当父类加载器找不到该类时，才会尝试由当前类加载器加载。</p></blockquote><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Q: 如果一个类重复出现在三个类加载器的加载位置，应该由谁来加载呢？</strong><br> A: 启动类加载器加载，根据双亲委派机制，它的优先级是最高的。</p><p><strong>Q: <code>String</code> 类能覆盖吗？在自己的项目中创建一个 <code>java.lang.String</code></strong><br> A: 不会，因为会交由启动类加载器加载在 <code>rt.jar</code> 包中的 <code>String</code> 类。</p><p><strong>双亲委派机制的作用：</strong></p><ol><li><p><strong>保证类加载的安全性</strong><br> 通过双亲委派机制，让顶层的类加载器去加载核心类，避免恶意代码替换 JDK 中的核心类库（比如 <code>java.lang.String</code>），确保核心类库的完整性和安全性。</p></li><li><p><strong>避免重复加载</strong><br> 上层的类加载器如果加载过类，就会直接返回该类，避免重复加载。</p></li></ol><p><strong>如何打破双亲委派机制？</strong></p><ul><li>自定义类加载器。重写 <code>loadClass</code> 方法去除双亲委派机制的代码（如 Tomcat 的应用隔离）。</li><li>线程上下文类加载器。通过上下文类加载器实现特定功能（如 JDBC）。</li><li>OSGi 框架的类加载器。</li></ul><h3 id="运行时数据区-1" tabindex="-1"><a class="header-anchor" href="#运行时数据区-1"><span>运行时数据区</span></a></h3><p>Java8的内存结构： <img src="'+h+`" alt="" loading="lazy"></p><h4 id="线程共享" tabindex="-1"><a class="header-anchor" href="#线程共享"><span>线程共享</span></a></h4><h4 id="直接内存" tabindex="-1"><a class="header-anchor" href="#直接内存"><span>直接内存</span></a></h4><blockquote><p>指的是不通过 Java 堆，而是直接向系统内存申请的一块内存区域。直接内存的分配和释放不是由 JVM 自动管理的，而是通过操作系统的本地方法（Native Method）来进行的。</p></blockquote><ul><li>Java堆中的对象如果不再使用要回收，回收时会影响对象的创建和使用。</li><li>提高IO的操作效率。</li><li>要创建直接内存上的数据，可以使用ByteBuffer。</li></ul><h5 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区"><span>方法区</span></a></h5><blockquote><p>方法区是存放基础信息的位置。JDK8之后的方法区放在直接内存中，其实现是元空间。</p></blockquote><p>组成：</p><ul><li>类元信息 <ul><li>保存了类的基本信息(InstanceKlass)</li></ul></li><li>运行时常量池 <ul><li>保存了字节码文件中的常量池内容，可以通过内存地址快速定位</li></ul></li></ul><p>补充：</p><ul><li>intern：JDK6版本中intern()方法会把第一次遇到的字符串实例复制到永久代的字符串常量池中，返回的也是永久代里面这个字符串实例的引用。</li><li>JDK7及之后版本中由于字符串常量池在堆上，所以intern () 方法会把第一次遇到的字符串的引用放入字符串常量池。</li></ul><h4 id="堆" tabindex="-1"><a class="header-anchor" href="#堆"><span>堆</span></a></h4><p>组成：</p><ul><li><h2 id="字符串常量池" tabindex="-1"><a class="header-anchor" href="#字符串常量池"><span>字符串常量池</span></a></h2></li><li>静态变量</li></ul><p>存储：</p><ul><li>used、totoal、max</li><li>Java服务端程序开发时，建议将-Xmx（最大值max）和-Xms(初始total)设置为相同的值，这样在程序启动之后可使用的总内存就是最大内存，而无需向java虚拟机再次申请，减少了申请并分配内存时间上的开销，同时也不会出现内存过剩之后堆收缩的情况。</li></ul><h4 id="线程私有" tabindex="-1"><a class="header-anchor" href="#线程私有"><span>线程私有</span></a></h4><h5 id="程序计数器-pc寄存器" tabindex="-1"><a class="header-anchor" href="#程序计数器-pc寄存器"><span>程序计数器（PC寄存器）</span></a></h5><blockquote><p>存储的是接下来要执行的指令的内存地址。</p></blockquote><ul><li>控制程序指令的进行，实现分支、跳转、异常等逻辑。</li><li>在多线程执行情况下，线程来回切换时，保存接下来要执行的指令，方便线程继续执行。</li></ul><p><strong>Q:程序计数器在运行中会出现内存溢出吗？</strong><br> A:内存溢出指的是程序在使用某一块内存区域时，存放的数据需要占用的内存 大小超过了虚拟机能提供的内存上限。因为每个线程只存储一个固定长度的内存地址，程序计数器是不会发生内存溢出的。程序员无需对程序计数器做任何处理。</p><h5 id="java虚拟机栈" tabindex="-1"><a class="header-anchor" href="#java虚拟机栈"><span>Java虚拟机栈</span></a></h5><blockquote><p>Java虚拟机栈（Java Virtual Machine Stack）采用栈的数据结构来管理方法调用中的基本数据，每一个方法的调用使用一个栈帧来保存。Java虚拟机栈随着线程的创建而创建，随着线程的销毁而销毁。</p></blockquote><h6 id="栈帧的组成" tabindex="-1"><a class="header-anchor" href="#栈帧的组成"><span>栈帧的组成</span></a></h6><ol><li><p><strong>局部变量表</strong></p><ul><li>局部变量表的作用是在执行过程中存放所有的局部变量。</li><li>是一个数组，数组中每一个位置称之为<strong>槽</strong>，<code>long</code> 和 <code>double</code> 类型占用两个槽，其他类型占一个槽。</li><li>局部变量表中的槽是可以复用的，一旦某个局部变量不再生效，当前槽就可以再次被使用。</li></ul></li><li><p><strong>操作数栈</strong></p><ul><li>用于存放虚拟机在执行过程中的<strong>临时数据</strong>。</li><li>在编译期就可以确定操作数栈的最大深度，从而在执行时正确的分配内存大小。</li></ul></li><li><p><strong>帧数据</strong></p><ul><li><strong>动态连接</strong>。保存了编号到运行时常量池的内存地址的映射关系。</li><li><strong>方法出口</strong>。方法出口指的是方法在正确或者异常结束时，当前栈帧会被弹出，同时程序计数器应该指向上一个栈帧中的下一条指令的地址。所以在当前栈帧中，需要存储此方法出口的地址。</li><li><strong>异常表的引用</strong>。表存放的是代码中异常的处理信息，包含了异常捕获的生效范围以及异常发生后跳转到的字节码指令位置。</li></ul></li></ol><h6 id="栈内存溢出" tabindex="-1"><a class="header-anchor" href="#栈内存溢出"><span>栈内存溢出</span></a></h6><blockquote><p>Java虚拟机栈如果栈帧过多，占用的内存超过栈内存可以分配的的最大大小，就会出现（StackOverFlow）</p></blockquote><h2 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收"><span>垃圾回收</span></a></h2><ul><li>内存泄漏指的是不再使用的对象在系统中未被回收，内存泄漏的积累可能会导致内存溢出。</li><li>Java的垃圾回收器主要负责对堆上的内存进行回收。</li><li>自动垃圾回收降低了程序猿的难度，降低回收BUG的可能性；但是缺点就是程序员无法控制内存回收的及时性。</li><li>手动内存回收优点是回收及时性高；缺点是编写不当容易出现悬空指针、重复释放、内存泄漏等问题。</li></ul><h3 id="方法区的回收" tabindex="-1"><a class="header-anchor" href="#方法区的回收"><span>方法区的回收</span></a></h3><ul><li>方法区中能回收的内容主要就是不再使用的类。需要同时满足三个条件： <ul><li>此类的所有实例对象对已经被回收，在堆中不存在任何该类的实例对象以及子类对象。</li><li>加载该类的类加载器已经被回收。</li><li>该类对应的java.lang.Class对象没有在任何地方被引用。</li></ul></li></ul><h3 id="堆内存的回收" tabindex="-1"><a class="header-anchor" href="#堆内存的回收"><span>堆内存的回收</span></a></h3><h4 id="回收的判定" tabindex="-1"><a class="header-anchor" href="#回收的判定"><span>回收的判定</span></a></h4><h5 id="引用计数法" tabindex="-1"><a class="header-anchor" href="#引用计数法"><span>引用计数法</span></a></h5><ul><li>这个方法会为每个对象维护一个引用计数器，当对象被引用时+1，取消引用时-1</li><li>优点是实现简单，缺点是每次引用和取消引用都得维护计数器，有一定的性能开销。另一个问题就是存在循环引用的问题。</li></ul><h5 id="可达性分析法" tabindex="-1"><a class="header-anchor" href="#可达性分析法"><span>可达性分析法</span></a></h5><blockquote><p>可达性分析算法指的是如果从某个对象到GC Root对象是可达的，对象就不可被回收。</p></blockquote><ul><li>可达性分析将对象分为两类：垃圾回收的根对象（GC Root）和普通对象，对象与对象之间存在引用关系。</li><li>哪些对象可以称之为GC Root对象？ <ul><li>线程Thread对象</li><li>系统类加载器加载的java.lang.Class对象</li><li>监视器对象，synchronized关键字持有的对象</li><li>本地方法调用时使用的全局对象</li></ul></li></ul><h4 id="五种对象引用" tabindex="-1"><a class="header-anchor" href="#五种对象引用"><span>五种对象引用</span></a></h4><h5 id="强引用" tabindex="-1"><a class="header-anchor" href="#强引用"><span>强引用</span></a></h5><blockquote><p>最常见的引用方式，由可达性分析算法来判断</p></blockquote><h5 id="软引用" tabindex="-1"><a class="header-anchor" href="#软引用"><span>软引用</span></a></h5><blockquote><p>软引用相对于强引用是一种比较弱的引用关系，如果一个对象只有软引用关联到它，当程序内存不足时，就会将软引用中的数据进行回收。</p></blockquote><ul><li><p><strong>使用过程：</strong></p><ol><li>将对象使用软引用包装起来，<code>new SoftReference&lt;对象类型&gt;(对象)</code>。</li><li>内存不足时，虚拟机尝试进行垃圾回收。</li><li>如果垃圾回收仍不能解决内存不足的问题，回收软引用中的对象。</li><li>如果依然内存不足，抛出 <code>OutOfMemory</code> 异常。</li></ol></li><li><p><strong>软引用的回收机制：</strong></p><ul><li>软引用中的对象如果在内存不足时被回收，<code>SoftReference</code> 对象本身也需要被回收。如何知道哪些 <code>SoftReference</code> 对象需要回收呢？</li><li><code>SoftReference</code> 提供了一套队列机制： <ol><li>软引用创建时，通过构造器传入引用队列。</li><li>在软引用中包含的对象被回收时，该软引用对象会被放入引用队列。</li><li>通过代码遍历引用队列，将 <code>SoftReference</code> 的强引用删除。软引用也可以使用继承自 <code>SoftReference</code> 类的方式来实现。</li></ol></li></ul></li><li><p><strong>使用软引用实现学生数据的缓存的例子：</strong></p></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * 软引用案例4 - 学生信息的缓存</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StudentCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StudentCache</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cache </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StudentCache</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; ; i++) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            StudentCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cacheStudent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i)));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StudentRef</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> studentRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 用于缓存内容的存储</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ReferenceQueue</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Student</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> q</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 垃圾Reference的队列</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 继承SoftReference，使得每一个实例都具有可识别的标识。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 并且该标识与其在HashMap内的key相同。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StudentRef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SoftReference</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Student</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _key </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StudentRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Student</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ReferenceQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">q</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(em, q);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            _key </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 构建一个缓存器实例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StudentCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        studentRefs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        q </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ReferenceQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 取得缓存器实例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StudentCache</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cache;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 以软引用的方式对一个Student对象的实例进行引用并保存该引用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cacheStudent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Student</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        cleanCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 清除垃圾引用</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        StudentRef</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StudentRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(em, q);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        studentRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), ref);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">studentRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 依据所指定的ID号，重新获取相应Student对象的实例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Student</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getStudent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Student</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> em</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 缓存中是否有该Student实例的软引用，如果有，从软引用中取得。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">studentRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">containsKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(id)) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            StudentRef</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> studentRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(id);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            em </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 如果没有软引用，或者从软引用中得到的实例是null，重新构建一个实例，</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 并保存对这个新建实例的软引用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (em </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            em </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(id, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(id));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Retrieve From StudentInfoCenter. ID=&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cacheStudent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(em);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> em;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 清除那些所软引用的Student对象已经被回收的StudentRef对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cleanCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        StudentRef</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((ref </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (StudentRef) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">q</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            studentRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">_key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//    // 清除Cache内的全部内容</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//    public void clearCache() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//        cleanCache();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//        studentRefs.clear();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//        //System.gc();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//        //System.runFinalization();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="弱引用" tabindex="-1"><a class="header-anchor" href="#弱引用"><span>弱引用</span></a></h5><blockquote><p>弱引用的整体机制和软引用基本一致，区别在于弱引用包含的对象在垃圾回收时，不管内存够不够都会直接被回收。在JDK 1.2版之后提供了WeakReference类来实现弱引用，弱引用主要在ThreadLocal中使用。弱引用对象本身也可以使用引用队列进行回收。</p></blockquote><h5 id="虚引用" tabindex="-1"><a class="header-anchor" href="#虚引用"><span>虚引用</span></a></h5><blockquote><p>虚引用也叫幽灵引用/幻影引用。不能通过虚引用对象获取到包含的对象。虚引用唯一的用途是当对象被垃圾回收器回收时可以接收到对应的通知。例如直接内存的释放,通过虚引用知道对象被回收了</p></blockquote><h5 id="终结器引用" tabindex="-1"><a class="header-anchor" href="#终结器引用"><span>终结器引用</span></a></h5><blockquote><p>对象回收时可以自救，不建议使用</p></blockquote><h4 id="垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法"><span>垃圾回收算法</span></a></h4><blockquote><p>核心就是找到内存中存活的对象，释放不再存活的对象的内存，是的程序能再次利用这部分空间。</p></blockquote><p>评价标准：Java垃圾回收过程会通过单独的GC线程来完成，但是不管使用哪一种GC算法，都会有部分阶段需要停止所有的用户线程。这个过程被称之为Stop The World简称STW，如果STW时间过长则会影响用户的使用。</p><p>三个评价的方面：</p><ul><li>吞吐量；吞吐量 = 执行用户代码的时间 / （执行用户代码的时间 + GC时间），吞吐量越高，垃圾回收的效率就越高。</li><li>最大暂停时间；最大暂停时间越短，用户使用系统时收到的影响就越短。</li><li>堆的使用效率；从堆的使用效率上来说，标记清楚算法就要优于复制算法。 以上三个方面不可兼得，只能说往哪边侧重。</li></ul><h5 id="标记清除算法" tabindex="-1"><a class="header-anchor" href="#标记清除算法"><span>标记清除算法</span></a></h5><p>两个阶段：</p><ul><li>标记阶段；将所有存活对象进行标记，Java中使用可达性分析算法，从GC Root开始通过引用链遍历出所有存活对象。</li><li>清除阶段；从内存中删除没有被标记也就是非存活对象。</li></ul><p>优点：实现简单，只需要在第一阶段给每个对象维护标志位，第二阶段删除对象即可。 缺点：</p><ul><li>碎片化问题由于内存是连续的，所以在对象被删除之后，内存中会出现很多细小的可用内存单元。如果我们需要的是一个比较大的空间，很有可能这些内存单元的大小过小无法进行分配。</li><li>分配速度慢。由于内存碎片的存在，需要维护一个空闲链表，极有可能发生每次需要遍历到链表的最后才能获得合适的内存空间。</li></ul><h5 id="复制算法" tabindex="-1"><a class="header-anchor" href="#复制算法"><span>复制算法</span></a></h5><p>复制算法的核心思想是：</p><ul><li>准备两块空间From空间和To空间，每次在对象分配阶段，只能使用其中一块空间（From空间）。</li><li>在垃圾回收GC阶段，将From中存活对象复制到To空间。</li><li>将两块空间的From和To名字互换。</li></ul><p>优点：</p><ul><li>吞吐量高；比标记整理算法少了一步整理。</li><li>不会发生碎片化，在复制之后就会将对象按顺序放到to空间中。 缺点：内存使用效率低，每次只能使用一半的空间来创建对象使用</li></ul><h5 id="标记整理算法" tabindex="-1"><a class="header-anchor" href="#标记整理算法"><span>标记整理算法</span></a></h5><p>标记整理算法也叫标记压缩算法，是对标记清理算法中容易产生内存碎片问题的一种解决方案。</p><p>核心思想分为两个阶段： 1.标记阶段，将所有存活的对象进行标记。Java中使用可达性分析算法，从GC Root开始通过引用链遍历出所有存活对象。 2.整理阶段，将存活对象移动到堆的一端。清理掉存活对象的内存空间。</p><p>优点：</p><ul><li>内存使用率高</li><li>不会发生碎片化 缺点：整理阶段的效率不高</li></ul><h5 id="分代gc" tabindex="-1"><a class="header-anchor" href="#分代gc"><span>分代GC</span></a></h5><p>分代垃圾回收将整个内存区域划分为年轻代和老年代： <img src="`+t+'" alt="" loading="lazy"></p><p>核心思想： 分代回收时，创建出来的对象，首先会被放入Eden伊甸园区。<br> 随着对象在Eden区越来越多，如果Eden区满，新创建的对象已经无法放入，就会触发年轻代的GC，称为Minor GC或者Young GC。<br> Minor GC会把需要eden中和From需要回收的对象回收，把没有回收的对象放入To区。</p><p>接下来，SO会变成To区，S1变成From区。当eden区满时再往里放入对象，依然会发生Minor GC。<br> 此时会回收eden区和S1（from）中的对象，并把eden和from区中剩余的对象放入SO。 注意：每次Minor GC中都会为对象记录他的年龄，初始值为0，每次GC完加1。</p><p>如果Minor GC后对象的年龄达到阈值（最大15，默认值和垃圾回收器有关），对象就会被晋升至老年代。 当老年代中空间不足，无法放入新的对象时，先尝试minor gc如果还是不足，就会触发Full GC，Full GC会对整个堆进行垃圾回收。 如果Full GC依然无法回收掉老年代的对象，那么当对象继续放入老年代时，就会抛出Out Of Memory异常。</p><p>分区域的好处：</p><ul><li>系统中的大部分对象，都是创建出来之后很快就不再使用可以被回收，比如用户获取订单数据，订单数据返回给用户之后就可以释放了。这种对象就适合放在年轻代</li><li>老年代中会存放长期存活的对象，比如Spring的大部分bean对象，在程序启动之后就不会被回收了。</li><li>可以通过调整年轻代和老年代的比例来适应不同类型的应用程序，提高内存的利用率和性能。</li><li>新生代和老年代使用不同的垃圾回收算法，新生代一般选择复制算法，老年代可以选择标记-清除和标记-整理算法，由程序员来选择灵活度较高。</li><li>分代的设计中允许只回收新生代（minor gc），如果能满足对象分配的要求就不需要对整个堆进行回收(full gc),STW时间就会减少。</li></ul><h4 id="垃圾回收器" tabindex="-1"><a class="header-anchor" href="#垃圾回收器"><span>垃圾回收器</span></a></h4><p>Parallel Scavenge 关注吞吐量，允许用户设置最大暂停时间，但是会减少年轻代可用空间的大小。CMS关注暂停时间，但是吞吐量方面会下降。</p><h5 id="g1垃圾回收器" tabindex="-1"><a class="header-anchor" href="#g1垃圾回收器"><span>G1垃圾回收器</span></a></h5><p>而G1设计目标就是将上述两种垃圾回收器的优点融合：</p><ul><li>支持巨大的堆空间回收，并有较高的吞吐量。</li><li>支持多CPU并行垃圾回收。</li><li>允许用户设置最大暂停时间。</li></ul><p>内存结构： G1的整个堆会被划分成多个大小相等的区域，称之为区Region，区域不要求是连续的。分为Eden、SurvivorOld区。<br> Region的大小通过堆空间大小/2048计算得到，也可以通过参数指定</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>G1垃圾回收器的两种回收方式：</p><ul><li>年轻代回收； <ul><li>年轻代回收（Young GC），回收Eden区和Survivor区中不用的对象。会导致STW，G1中可以通过参数设置每次垃圾回收时的最大暂停时间毫秒数，G1垃圾回收器会尽可能地保证暂停时间。</li><li>G1在进行Young GC的过程中会去记录每次垃圾回收时每个Eden区和Survivor区的平均耗时，以作为下次回收时的参考依据。这样就可以根据配置的最大暂停时间计算出本次回收时最多能回收多少Regio区域了。</li><li>后续Young GC时与之前相同，只不过Survivor区中存活对象会被搬运到另一个Survivor区。</li><li>当某个存活对象的年龄到达阈值（默认15），将被放入老年代。</li><li>部分对象如果大小超过Region的一半，会直接放入老年代，这类老年代被称为Humongous区。</li></ul></li><li>混合回收 <ul><li>多次回收之后，会出现很多Old老年代区，此时总堆占有率达到阈值时（默认45%）会触发混合回收MixedGC。回收所有年轻代和部分老年代的对象以及大对象区。采用复制算法来完成。</li><li>G1对老年代的清理会选择存活度最低的区域来进行回收，这样可以保证回收效率最高</li></ul></li><li>FULL GC <ul><li>如果清理过程中发现没有足够的空Region存放转移的对象，会出现Full GC。单线程执行标记-整理算法，此时会导致用户线程的暂停。所以尽量保证应该用的堆内存有一定多余的空间。</li></ul></li></ul><p>垃圾回收器的组合关系虽然很多，但是针对几个特定的版本，比较好的组合选择如下：<br> JDK8及之前：</p><ul><li>ParNew + CMS（关注暂停时间）</li><li>Parallel Scavenge + Parallel Old（关注吞吐量）</li><li>G1（JDK8之前不建议，较大堆并且关注暂停时间）</li></ul><p>JDK9之后：</p><ul><li>G1（默认）</li></ul>',147),r=[d];function c(o,g){return a(),s("div",null,r)}const y=i(k,[["render",c],["__file","JVM.html.vue"]]),u=JSON.parse('{"path":"/docs/code/backend/java/JVM.html","title":"JVM","lang":"zh-CN","frontmatter":{"title":"JVM","icon":"file","order":null,"date":"2024-10-14T00:00:00.000Z","tags":null,"description":"JVM 默认讨论的版本为 JDK8 之后的版本 JVM Java Virtual Machine，Java虚拟机，是一个在计算机上的程序，它的职责是运行 Java 字节码文件。 JVM的三大核心功能 解释运行 对字节码文件中的指令，实时的解释成机器码，让计算机执行。 内存管理 自动为对象、方法等分配内存。 自动的垃圾回收机制，回收不再使用的对象。 即时...","head":[["meta",{"property":"og:url","content":"https://blueboysalvat.github.io/docs/code/backend/java/JVM.html"}],["meta",{"property":"og:site_name","content":"忧郁男孩的救赎"}],["meta",{"property":"og:title","content":"JVM"}],["meta",{"property":"og:description","content":"JVM 默认讨论的版本为 JDK8 之后的版本 JVM Java Virtual Machine，Java虚拟机，是一个在计算机上的程序，它的职责是运行 Java 字节码文件。 JVM的三大核心功能 解释运行 对字节码文件中的指令，实时的解释成机器码，让计算机执行。 内存管理 自动为对象、方法等分配内存。 自动的垃圾回收机制，回收不再使用的对象。 即时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"WangWenpeng"}],["meta",{"property":"article:published_time","content":"2024-10-14T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WangWenpeng\\",\\"url\\":\\"blueboysalvat.github.io\\"}]}"]]},"headers":[{"level":2,"title":"JVM","slug":"jvm","link":"#jvm","children":[{"level":3,"title":"JVM","slug":"jvm-1","link":"#jvm-1","children":[]},{"level":3,"title":"JVM的三大核心功能","slug":"jvm的三大核心功能","link":"#jvm的三大核心功能","children":[]},{"level":3,"title":"常见的 JVM 虚拟机","slug":"常见的-jvm-虚拟机","link":"#常见的-jvm-虚拟机","children":[]},{"level":3,"title":"JVM的组成","slug":"jvm的组成","link":"#jvm的组成","children":[]},{"level":3,"title":"字节码文件的组成","slug":"字节码文件的组成","link":"#字节码文件的组成","children":[]},{"level":3,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]},{"level":3,"title":"类加载器的分类","slug":"类加载器的分类","link":"#类加载器的分类","children":[]},{"level":3,"title":"双亲委派机制","slug":"双亲委派机制","link":"#双亲委派机制","children":[]},{"level":3,"title":"运行时数据区","slug":"运行时数据区-1","link":"#运行时数据区-1","children":[]}]},{"level":2,"title":"垃圾回收","slug":"垃圾回收","link":"#垃圾回收","children":[{"level":3,"title":"方法区的回收","slug":"方法区的回收","link":"#方法区的回收","children":[]},{"level":3,"title":"堆内存的回收","slug":"堆内存的回收","link":"#堆内存的回收","children":[]}]}],"git":{},"readingTime":{"minutes":20.59,"words":6177},"filePathRelative":"docs/code/backend/java/JVM.md","localizedDate":"2024年10月14日","excerpt":"<h2>JVM</h2>\\n<blockquote>\\n<p>默认讨论的版本为 JDK8 之后的版本</p>\\n</blockquote>\\n<h3>JVM</h3>\\n<blockquote>\\n<p>Java Virtual Machine，Java虚拟机，是一个在计算机上的程序，它的职责是运行 Java 字节码文件。</p>\\n</blockquote>\\n<h3>JVM的三大核心功能</h3>\\n<ol>\\n<li>\\n<p><strong>解释运行</strong><br>\\n对字节码文件中的指令，实时的解释成机器码，让计算机执行。</p>\\n</li>\\n<li>\\n<p><strong>内存管理</strong></p>\\n<ul>\\n<li>自动为对象、方法等分配内存。</li>\\n<li>自动的垃圾回收机制，回收不再使用的对象。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>即时编译</strong><br>\\n对热点代码进行优化，提升执行效率。</p>\\n</li>\\n</ol>","autoDesc":true}');export{y as comp,u as data};
