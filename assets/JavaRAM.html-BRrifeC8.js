import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,d as l}from"./app-l65TvXU-.js";const n="/assets/JVM_RAM_Structure-KIlQPgR-.png",o="/assets/JVM_RAM_Structure2-mE_ldXC1.png",i="/assets/JVM_RAM_Structure3-BkIdA-Kf.png",r={},c=l('<h3 id="栈内存空间" tabindex="-1"><a class="header-anchor" href="#栈内存空间"><span>栈内存空间</span></a></h3><blockquote><p>基本数据类型 引用（数组名、类名、接口名）</p></blockquote><ul><li>先进后出，后进先出</li><li>存取速度比堆要快，仅次于寄存器，栈数据可以共享，但缺点是，存在栈中的数据大小与生存必须是确定的，缺乏灵活性</li></ul><h3 id="堆内存空间" tabindex="-1"><a class="header-anchor" href="#堆内存空间"><span>堆内存空间</span></a></h3><blockquote><p><code>new</code> 出来的内容（数组、对象）</p></blockquote><ul><li>堆可以动态地分配内存大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的，但缺点是，由于要在运行时动态分配内存，存取速度较慢。</li></ul><h2 id="图解-jvm-内存模型" tabindex="-1"><a class="header-anchor" href="#图解-jvm-内存模型"><span>图解 JVM 内存模型：</span></a></h2><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><img src="'+o+'" alt="" loading="lazy"><img src="'+i+'" alt="" loading="lazy"></p><p>线程私有内存区：</p><ul><li>随着线程的产生和消亡，编译时确定所需要的内存大小。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料 ：</span></a></h2><ul><li><a href="https://www.bilibili.com/video/BV1ET4y1Z711/" target="_blank" rel="noopener noreferrer">带你认识java中jvm虚拟机栈</a></li><li><a href="https://www.bilibili.com/video/BV1Q64y1h7PT" target="_blank" rel="noopener noreferrer">白话 JVM 内存结构，死也忘不了</a></li><li><a href="https://www.bilibili.com/video/BV12t411u726/" target="_blank" rel="noopener noreferrer">jvm内存模型全面解析哔哩哔哩</a></li></ul>',13),s=[c];function p(d,h){return a(),t("div",null,s)}const g=e(r,[["render",p],["__file","JavaRAM.html.vue"]]),_=JSON.parse('{"path":"/docs/code/backend/java/javaRAM.html","title":"Java中的内存模型","lang":"zh-CN","frontmatter":{"title":"Java中的内存模型","date":"2024-01-21T00:00:00.000Z","icon":"file","category":["Java"],"tags":["内存模型"],"description":"栈内存空间 基本数据类型 引用（数组名、类名、接口名） 先进后出，后进先出 存取速度比堆要快，仅次于寄存器，栈数据可以共享，但缺点是，存在栈中的数据大小与生存必须是确定的，缺乏灵活性 堆内存空间 new 出来的内容（数组、对象） 堆可以动态地分配内存大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的，但缺点是，由于要在运行时动态分配内存，...","head":[["meta",{"property":"og:url","content":"https://blueboysalvat.github.io/docs/code/backend/java/javaRAM.html"}],["meta",{"property":"og:site_name","content":"忧郁男孩的救赎"}],["meta",{"property":"og:title","content":"Java中的内存模型"}],["meta",{"property":"og:description","content":"栈内存空间 基本数据类型 引用（数组名、类名、接口名） 先进后出，后进先出 存取速度比堆要快，仅次于寄存器，栈数据可以共享，但缺点是，存在栈中的数据大小与生存必须是确定的，缺乏灵活性 堆内存空间 new 出来的内容（数组、对象） 堆可以动态地分配内存大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的，但缺点是，由于要在运行时动态分配内存，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"WangWenpeng"}],["meta",{"property":"article:tag","content":"内存模型"}],["meta",{"property":"article:published_time","content":"2024-01-21T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的内存模型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WangWenpeng\\",\\"url\\":\\"blueboysalvat.github.io\\"}]}"]]},"headers":[{"level":3,"title":"栈内存空间","slug":"栈内存空间","link":"#栈内存空间","children":[]},{"level":3,"title":"堆内存空间","slug":"堆内存空间","link":"#堆内存空间","children":[]},{"level":2,"title":"图解 JVM 内存模型：","slug":"图解-jvm-内存模型","link":"#图解-jvm-内存模型","children":[]},{"level":2,"title":"参考资料 ：","slug":"参考资料","link":"#参考资料","children":[]}],"git":{},"readingTime":{"minutes":0.87,"words":262},"filePathRelative":"docs/code/backend/java/javaRAM.md","localizedDate":"2024年1月21日","excerpt":"<h3>栈内存空间</h3>\\n<blockquote>\\n<p>基本数据类型\\n引用（数组名、类名、接口名）</p>\\n</blockquote>\\n<ul>\\n<li>先进后出，后进先出</li>\\n<li>存取速度比堆要快，仅次于寄存器，栈数据可以共享，但缺点是，存在栈中的数据大小与生存必须是确定的，缺乏灵活性</li>\\n</ul>\\n<h3>堆内存空间</h3>\\n<blockquote>\\n<p><code>new</code> 出来的内容（数组、对象）</p>\\n</blockquote>\\n<ul>\\n<li>堆可以动态地分配内存大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的，但缺点是，由于要在运行时动态分配内存，存取速度较慢。</li>\\n</ul>","autoDesc":true}');export{g as comp,_ as data};
