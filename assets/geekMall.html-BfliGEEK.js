import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as i,d as a}from"./app-l65TvXU-.js";const t={},n=a('<h2 id="拆分公共部分" tabindex="-1"><a class="header-anchor" href="#拆分公共部分"><span>拆分公共部分</span></a></h2><ul><li>提取谁？除了 web 层之外的内容，mapper、service、实体类工具类</li><li>如何做？ <ul><li>在工程下新建子模块 common <ul><li>把 mapper、service、实体类工具按照一定的层次剪切进来</li><li>修改 pom.xml，主要是引入父工程以及倒入子模块需要单独用到的依赖项</li></ul></li><li>修改全局配置文件</li><li>测试</li></ul></li></ul><h2 id="部署项目" tabindex="-1"><a class="header-anchor" href="#部署项目"><span>部署项目</span></a></h2><p>大致步骤：</p><ul><li>检查项目的 jdk 版本与服务器生产环境的 jdk 版本是否对应</li><li>在 idea Maven 窗口中的设置 &quot;跳过测试&quot;</li><li>删除父工程的打包插件</li><li>在需要打包的子模块中配置打包插件 <ul><li>修改主类为子类启动类</li><li>skip 去掉</li></ul></li><li>修改路径问题，某些映射路径可能需要对应服务器路径单独设置一遍</li><li>在云服务器的 Mysql 中导入相关数据库</li><li>向云服务器中上传一些测试图片</li></ul><p>配置项目可能出现的问题：</p><ul><li>访问端口不对，检查 server.xml</li><li>检查防火墙设置</li><li>数据源的配置</li></ul><p>在服务器中运行项目： 启动 jar 时也可以指定端口：java -jar xxx.jar --server.port=8090</p><p>后台运行 jar 并保持日志保存： <code>nohup java -jar pengchengBook.jar &gt; catalina.out 2&gt;&amp;1 &amp;</code></p><p>查看所有后台进程</p><ul><li><code>netstat -tulnp</code></li><li><code>ps -ef</code> （可以查看系统进程） 强制结束进程</li><li><code>kill -9 PID</code></li></ul><h2 id="雪花算法" tabindex="-1"><a class="header-anchor" href="#雪花算法"><span>雪花算法</span></a></h2><p>雪花算法是 64 位 的二进制，一共包含了四部分：</p><ul><li>1位是符号位，也就是最高位，始终是0，没有任何意义，因为要是唯一计算机二进制补码中就是负数，0才是正数。</li><li>41位是时间戳，具体到毫秒，41位的二进制可以使用69年，因为时间理论上永恒递增，所以根据这个排序是可以的。</li><li>10位是机器标识，可以全部用作机器ID，也可以用来标识机房ID + 机器ID，10位最多可以表示1024台机器。</li><li>12位是计数序列号，也就是同一台机器上同一时间，理论上还可以同时生成不同的ID，12位的序列号能够区分出4096个ID。</li></ul><p><a href="https://segmentfault.com/a/1190000040964518" target="_blank" rel="noopener noreferrer">参考链接</a></p><h2 id="排错" tabindex="-1"><a class="header-anchor" href="#排错"><span>排错</span></a></h2><h3 id="参数接收" tabindex="-1"><a class="header-anchor" href="#参数接收"><span>参数接收</span></a></h3><ul><li>检查前端是否正确发送请求，并且携带对应的参数</li><li>检查请求是否可以被正确的方法接收</li><li>检查前后端参数名是否匹配</li><li>检查后端的方法是否加了 RequestBody（如果需要返回 JSON 时）</li><li>检查 Ajax 中发送请求的参数类型是否正确； <ul><li>例如你可能发现你 Ajax 中使用了 JSON.stringify 和 contentType，但是前端接受的不是 JSON 数据；</li></ul></li></ul><h2 id="thymeleaf-和-layui" tabindex="-1"><a class="header-anchor" href="#thymeleaf-和-layui"><span>Thymeleaf 和 Layui</span></a></h2><p>Thymeleaf 在服务器端获取数据并且填充到模板中，将填充好数据的 html 文件直接返回给浏览器，由浏览器渲染展示成品页面。 Layui，使用 Layui 发送 ajax 请求，在服务器端获取到数据以 JSON 数据的形式返回给 ajax 的回调函数，在函数中会数据进行相关处理。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>An alert of type &#39;warning&#39; using global style &#39;callout&#39;.</p></div>',21),r=[n];function o(p,c){return i(),e("div",null,r)}const d=l(t,[["render",o],["__file","geekMall.html.vue"]]),u=JSON.parse('{"path":"/docs/project/geekMall.html","title":"极客商城","lang":"zh-CN","frontmatter":{"title":"极客商城","icon":"file","order":null,"date":"2024-04-20T00:00:00.000Z","category":["项目"],"tags":["商场"],"description":"拆分公共部分 提取谁？除了 web 层之外的内容，mapper、service、实体类工具类 如何做？ 在工程下新建子模块 common 把 mapper、service、实体类工具按照一定的层次剪切进来 修改 pom.xml，主要是引入父工程以及倒入子模块需要单独用到的依赖项 修改全局配置文件 测试 部署项目 大致步骤： 检查项目的 jdk 版本与服...","head":[["meta",{"property":"og:url","content":"https://blueboysalvat.github.io/docs/project/geekMall.html"}],["meta",{"property":"og:site_name","content":"忧郁男孩的救赎"}],["meta",{"property":"og:title","content":"极客商城"}],["meta",{"property":"og:description","content":"拆分公共部分 提取谁？除了 web 层之外的内容，mapper、service、实体类工具类 如何做？ 在工程下新建子模块 common 把 mapper、service、实体类工具按照一定的层次剪切进来 修改 pom.xml，主要是引入父工程以及倒入子模块需要单独用到的依赖项 修改全局配置文件 测试 部署项目 大致步骤： 检查项目的 jdk 版本与服..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"WangWenpeng"}],["meta",{"property":"article:tag","content":"商场"}],["meta",{"property":"article:published_time","content":"2024-04-20T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"极客商城\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WangWenpeng\\",\\"url\\":\\"blueboysalvat.github.io\\"}]}"]]},"headers":[{"level":2,"title":"拆分公共部分","slug":"拆分公共部分","link":"#拆分公共部分","children":[]},{"level":2,"title":"部署项目","slug":"部署项目","link":"#部署项目","children":[]},{"level":2,"title":"雪花算法","slug":"雪花算法","link":"#雪花算法","children":[]},{"level":2,"title":"排错","slug":"排错","link":"#排错","children":[{"level":3,"title":"参数接收","slug":"参数接收","link":"#参数接收","children":[]}]},{"level":2,"title":"Thymeleaf 和 Layui","slug":"thymeleaf-和-layui","link":"#thymeleaf-和-layui","children":[]}],"git":{},"readingTime":{"minutes":2.68,"words":803},"filePathRelative":"docs/project/geekMall.md","localizedDate":"2024年4月20日","excerpt":"<h2>拆分公共部分</h2>\\n<ul>\\n<li>提取谁？除了 web 层之外的内容，mapper、service、实体类工具类</li>\\n<li>如何做？\\n<ul>\\n<li>在工程下新建子模块 common\\n<ul>\\n<li>把 mapper、service、实体类工具按照一定的层次剪切进来</li>\\n<li>修改 pom.xml，主要是引入父工程以及倒入子模块需要单独用到的依赖项</li>\\n</ul>\\n</li>\\n<li>修改全局配置文件</li>\\n<li>测试</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>部署项目</h2>\\n<p>大致步骤：</p>\\n<ul>\\n<li>检查项目的 jdk 版本与服务器生产环境的 jdk 版本是否对应</li>\\n<li>在 idea Maven 窗口中的设置 \\"跳过测试\\"</li>\\n<li>删除父工程的打包插件</li>\\n<li>在需要打包的子模块中配置打包插件\\n<ul>\\n<li>修改主类为子类启动类</li>\\n<li>skip 去掉</li>\\n</ul>\\n</li>\\n<li>修改路径问题，某些映射路径可能需要对应服务器路径单独设置一遍</li>\\n<li>在云服务器的 Mysql 中导入相关数据库</li>\\n<li>向云服务器中上传一些测试图片</li>\\n</ul>","autoDesc":true}');export{d as comp,u as data};
